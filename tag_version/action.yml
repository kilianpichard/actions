name: "🏷️ Tag version"
description: "Checkout code, setup Node.js, and tag version."

inputs:
  node-version:
    description: "Version de Node.js"
    required: false
    default: "21"
  path:
    description: "Chemin vers le dossier contenant le fichier package.json"
    required: false
    default: "."
  useSemanticRelease:
    description: "Utiliser semantic-release pour taguer la version"
    required: false
    default: "true"

outputs:
  VERSION: # Sortie pour récupérer la version
    description: "Version du projet"
    value: ${{ steps.set_app_version.outputs.VERSION }}

runs:
  using: "composite"
  steps:
    - name: 📦 Setup
      uses: kilianpichard/actions/setup@main
      with:
        path: ${{ inputs.path }}

    - name: 🚀 Release with semantic-release
      if: ${{ inputs.useSemanticRelease == 'true' }} && ${{ github.ref == 'refs/heads/main' }}
      shell: bash
      run: |
        cd ${{ inputs.path }}
        npx semantic-release

    - name: 🏷️ Get version
      if: ${{ inputs.useSemanticRelease == 'true' }} && ${{ github.ref == 'refs/heads/main' }}
      shell: bash
      id: version
      run: |
        if [ ! -f ${{ inputs.path }}/version.txt ]; then
          LATEST_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo $LATEST_VERSION | sed 's/v//' > ${{ inputs.path }}/version.txt
        fi
        SEMANTIC_VERSION=$(cat ${{ inputs.path }}/version.txt)
        echo "SEMANTIC_VERSION=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT

    - name: Get short SHA
      id: slug
      shell: bash
      run: echo "SLUG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Set App Version
      id: set_app_version
      shell: bash
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ inputs.useSemanticRelease }}" == "true" ]; then
          echo "VERSION=${{ steps.version.outputs.SEMANTIC_VERSION}}" >> $GITHUB_OUTPUT
          echo "::set-output name=VERSION::${{ steps.version.outputs.SEMANTIC_VERSION}}"
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "VERSION=production-${{ steps.slug.outputs.SLUG }}" >> $GITHUB_OUTPUT
          echo "::set-output name=VERSION::production-${{ steps.slug.outputs.SLUG }}"
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "VERSION=staging-${{ steps.slug.outputs.SLUG }}" >> $GITHUB_OUTPUT
          echo "::set-output name=VERSION::staging-${{ steps.slug.outputs.SLUG }}"
        else
          echo "VERSION=pull_request-${{ steps.slug.outputs.SLUG }}" >> $GITHUB_OUTPUT
          echo "::set-output name=VERSION::pull_request-${{ steps.slug.outputs.SLUG }}"
        fi
